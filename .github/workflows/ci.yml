name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  # Lint and Code Quality
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint CSS
      run: npm run lint:css
      continue-on-error: true
    
    - name: Lint JavaScript
      run: npm run lint:js
      continue-on-error: true
    
    - name: Format check
      run: npx prettier --check .
      continue-on-error: true

  # Build and Test
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: npm test
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  # Browser Testing
  browser-test:
    name: Browser Compatibility Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test in ${{ matrix.browser }}
      run: |
        echo "Testing in ${{ matrix.browser }}"
        # Add actual browser testing commands here
        # npx playwright test --browser=${{ matrix.browser }}

  # Performance Audit
  performance:
    name: Performance Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://dnoice.github.io/css-themeing-system/
        uploadArtifacts: true
        temporaryPublicStorage: true

  # Accessibility Check
  accessibility:
    name: Accessibility Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run accessibility tests
      run: |
        npx serve . -p 3000 &
        sleep 5
        npx pa11y http://localhost:3000 --reporter cli
      continue-on-error: true

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # Deploy to GitHub Pages
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [lint, build, browser-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: '.'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  # Create Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint, build, security]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
    
    - name: Create release archive
      run: |
        zip -r css-themeing-system-${{ github.event.release.tag_name }}.zip \
          index.html \
          variables.css \
          css/ \
          js/ \
          dist/ \
          README.md \
          LICENSE
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./css-themeing-system-${{ github.event.release.tag_name }}.zip
        asset_name: css-themeing-system-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip
    
    - name: Publish to npm
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Notify on Success/Failure
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [lint, build, browser-test, performance, accessibility, security]
    if: always()
    
    steps:
    - name: Send Discord notification
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        curl -H "Content-Type: application/json" \
          -d "{\"content\": \"âœ… CSS Theming System - Build completed for commit ${{ github.sha }}\"}" \
          $DISCORD_WEBHOOK
      continue-on-error: true
