name: Deploy to GitHub Pages

on:
  # Runs on pushes to main branch
  push:
    branches:
      - main
  
  # Allows manual trigger from Actions tab
  workflow_dispatch:

# Sets permissions for GITHUB_TOKEN
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    name: Build Site
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better metadata
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
      
      - name: Create production build
        run: |
          # Create dist directory
          mkdir -p dist
          
          # Copy all necessary files
          cp -r index.html dist/
          cp -r variables.css dist/
          cp -r css dist/
          cp -r js dist/
          cp -r examples dist/
          
          # Create minified versions
          npx cleancss -o dist/styles.min.css variables.css css/styles.css css/queries.css
          npx terser js/script.js -o dist/script.min.js --compress --mangle
          
          # Create combined CSS file
          cat variables.css css/styles.css css/queries.css > dist/theme-system.css
          npx cleancss -o dist/theme-system.min.css dist/theme-system.css
          
          # Generate source maps
          npx cleancss variables.css css/styles.css css/queries.css -o dist/theme-system.min.css --source-map
          npx terser js/script.js -o dist/script.min.js --source-map
          
          # Copy documentation
          cp README.md dist/
          cp LICENSE dist/
          cp CHANGELOG.md dist/
          
          # Create a simple 404 page
          cat > dist/404.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>404 - Page Not Found</title>
              <link rel="stylesheet" href="/css-themeing-system/variables.css">
              <link rel="stylesheet" href="/css-themeing-system/css/styles.css">
              <style>
                  body {
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      min-height: 100vh;
                      text-align: center;
                  }
                  .error-container {
                      padding: var(--space-8);
                  }
                  .error-code {
                      font-size: var(--text-5xl);
                      font-weight: var(--font-bold);
                      background: var(--gradient-primary);
                      -webkit-background-clip: text;
                      -webkit-text-fill-color: transparent;
                      background-clip: text;
                  }
              </style>
          </head>
          <body>
              <div class="error-container">
                  <h1 class="error-code">404</h1>
                  <h2>Page Not Found</h2>
                  <p>The page you're looking for doesn't exist.</p>
                  <a href="/css-themeing-system/" class="btn btn-primary">Go Home</a>
              </div>
          </body>
          </html>
          EOF
          
          # Create version file
          echo "{
            \"version\": \"$(git describe --tags --always)\",
            \"build_date\": \"$(date -u +\"%Y-%m-%dT%H:%M:%SZ\")\",
            \"commit\": \"$(git rev-parse HEAD)\",
            \"branch\": \"$(git rev-parse --abbrev-ref HEAD)\"
          }" > dist/version.json
      
      - name: Generate file listing
        run: |
          # Create a file listing for CDN usage
          cat > dist/files.json << EOF
          {
            "css": [
              "variables.css",
              "css/styles.css",
              "css/queries.css",
              "theme-system.min.css"
            ],
            "js": [
              "js/script.js",
              "script.min.js"
            ],
            "examples": [
              "examples/basic-usage.html"
            ]
          }
          EOF
      
      - name: Optimize assets
        run: |
          # Install optimization tools
          npm install -g html-minifier-terser svgo
          
          # Minify HTML files
          for file in dist/*.html dist/examples/*.html; do
            if [ -f "$file" ]; then
              html-minifier-terser \
                --collapse-whitespace \
                --remove-comments \
                --minify-css true \
                --minify-js true \
                "$file" -o "$file"
            fi
          done
          
          # Optimize any SVG files if they exist
          find dist -name "*.svg" -exec svgo {} \;
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: dist/
          retention-days: 30

  # Deployment job
  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Output deployment URL
        run: |
          echo "🚀 Deployed to: ${{ steps.deployment.outputs.page_url }}"
          echo "DEPLOYMENT_URL=${{ steps.deployment.outputs.page_url }}" >> $GITHUB_ENV
  
  # Post-deployment verification
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Wait for deployment to propagate
        run: sleep 30
      
      - name: Check site availability
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://dnoice.github.io/css-themeing-system/)
          if [ $response -eq 200 ]; then
            echo "✅ Site is live and responding with status 200"
          else
            echo "❌ Site returned status $response"
            exit 1
          fi
      
      - name: Validate CSS loading
        run: |
          curl -s https://dnoice.github.io/css-themeing-system/variables.css | head -n 5
          echo "✅ CSS files are accessible"
      
      - name: Validate JavaScript loading
        run: |
          curl -s https://dnoice.github.io/css-themeing-system/js/script.js | head -n 5
          echo "✅ JavaScript files are accessible"
      
      - name: Performance check
        run: |
          # Basic performance check using curl
          start_time=$(date +%s%N)
          curl -s https://dnoice.github.io/css-themeing-system/ > /dev/null
          end_time=$(date +%s%N)
          
          elapsed_time=$(( ($end_time - $start_time) / 1000000 ))
          echo "⏱️ Page load time: ${elapsed_time}ms"
          
          if [ $elapsed_time -lt 3000 ]; then
            echo "✅ Performance is good (under 3 seconds)"
          else
            echo "⚠️ Page load time is higher than expected"
          fi

  # Create release
  release:
    name: Create CDN Release
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: dist/
      
      - name: Create CDN bundle
        run: |
          # Create CDN-ready bundle
          mkdir -p cdn
          
          # Copy minified files
          cp dist/theme-system.min.css cdn/
          cp dist/theme-system.min.css.map cdn/ 2>/dev/null || true
          cp dist/script.min.js cdn/
          cp dist/script.min.js.map cdn/ 2>/dev/null || true
          
          # Create CDN usage instructions
          cat > cdn/README.md << 'EOF'
          # CSS Theming System CDN
          
          ## Quick Start
          
          ```html
          <!-- CSS -->
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/dnoice/css-themeing-system@latest/cdn/theme-system.min.css">
          
          <!-- JavaScript -->
          <script src="https://cdn.jsdelivr.net/gh/dnoice/css-themeing-system@latest/cdn/script.min.js"></script>
          ```
          
          ## Specific Version
          
          ```html
          <!-- CSS -->
          <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/dnoice/css-themeing-system@v3.0.0/cdn/theme-system.min.css">
          
          <!-- JavaScript -->
          <script src="https://cdn.jsdelivr.net/gh/dnoice/css-themeing-system@v3.0.0/cdn/script.min.js"></script>
          ```
          EOF
          
          # Create tarball for release
          tar -czf css-themeing-system-cdn.tar.gz cdn/
      
      - name: Update CDN files in repo
        run: |
          # This step would commit CDN files back to repo if needed
          echo "CDN files prepared for distribution"

  # Notification job
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy, verify]
    if: always()
    
    steps:
      - name: Determine status
        id: status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ] && [ "${{ needs.verify.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "message=Successfully deployed to GitHub Pages" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Deployment failed" >> $GITHUB_OUTPUT
          fi
      
      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # Deployment Summary ${{ steps.status.outputs.emoji }}
          
          **Status:** ${{ steps.status.outputs.message }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Triggered by:** ${{ github.actor }}
          **Workflow run:** ${{ github.run_id }}
          
          ## Deployment URL
          🔗 https://dnoice.github.io/css-themeing-system/
          
          ## CDN URLs
          - CSS: https://cdn.jsdelivr.net/gh/dnoice/css-themeing-system@latest/cdn/theme-system.min.css
          - JS: https://cdn.jsdelivr.net/gh/dnoice/css-themeing-system@latest/cdn/script.min.js
          
          ## Build Artifacts
          - ✅ HTML files minified
          - ✅ CSS files combined and minified
          - ✅ JavaScript minified
          - ✅ Source maps generated
          - ✅ Version file created
          
          ## Next Steps
          1. Verify the deployment at https://dnoice.github.io/css-themeing-system/
          2. Test all themes and components
          3. Check browser compatibility
          4. Monitor performance metrics
          EOF
      
      - name: Send Discord notification
        if: env.DISCORD_WEBHOOK != ''
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          curl -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"${{ steps.status.outputs.emoji }} Deployment ${{ steps.status.outputs.status }}\",
                \"description\": \"${{ steps.status.outputs.message }}\",
                \"color\": $([ "${{ steps.status.outputs.status }}" == "success" ] && echo "5763719" || echo "15548997"),
                \"fields\": [
                  {
                    \"name\": \"Branch\",
                    \"value\": \"${{ github.ref_name }}\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"Commit\",
                    \"value\": \"\`${{ github.sha }}\`\",
                    \"inline\": true
                  },
                  {
                    \"name\": \"URL\",
                    \"value\": \"[View Site](https://dnoice.github.io/css-themeing-system/)\"
                  }
                ],
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
              }]
            }" \
            $DISCORD_WEBHOOK || true
